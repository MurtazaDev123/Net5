
@{
    ViewBag.Title = "checkout";
    Layout = "~/Views/Shared/_WebLayout.cshtml";
}

@section HeadSection {

    <link href="~/content/css/stripe_style.css" rel="stylesheet" />

}

<section class="accountSection">
    <div class="accountSectionInner">
        <div class="logo">
            <a href="/"><img src="/content/web/img/logo.png"></a>
        </div>
        <div class="accountformDetail">

            <h1 class="text-center">SUBSCRIPTION PAYMENT</h1>

            <form id="payment-form">
                <div class="sr-root">
                    <div class="sr-main">

                        <div class="payment-view">
                            <h1 class="order-amount">@BusinessLogic.SBSession.GetSessionValue("SessionCurrency") @BusinessLogic.SBSession.GetSessionValue("SessionAmount")</h1>
                        </div>
                        <div class="sr-payment-form payment-view">
                            <div class="sr-form-row">

                                <div class="sr-combo-inputs">
                                    <div class="form-group">
                                        <input type="text"
                                               id="name"
                                               placeholder="Name"
                                               autocomplete="cardholder"
                                               class="form-control" value="@BusinessLogic.clsWebSession.UserName" />
                                    </div>
                                    <div class="form-group">
                                        <input type="text"
                                               id="email"
                                               placeholder="Email"
                                               autocomplete="cardholder"
                                               class="form-control" value="@BusinessLogic.clsWebSession.UserId" />
                                    </div>
                                    <div class="sr-combo-inputs-row">
                                        <div class="sr-input sr-card-element" id="card-element"></div>
                                    </div>
                                </div>
                                <div class="sr-field-error" id="card-errors" role="alert"></div>
                            </div>
                            <button id="submit">
                                <div class="spinner hidden" id="spinner"></div>
                                <span id="button-text">Pay</span>
                            </button>
                            <div class="sr-legal-text">
                                Payment will charge automatically every month/year (Based on you subscription) on the same day of Subscription until subscription is cancelled
                            </div>
                        </div>
                        
                    </div>
                </div>
            </form>


        </div>
    </div>
</section>
        

        <script src="https://js.stripe.com/v3/"></script>
        <script src="~/scripts/web/js/jquery-3.4.1.min.js"></script>
        <script src="~/scripts/web/js/jquery.toast.js"></script>
        <script src="~/scripts/custom/functions.js"></script>

        <script>

            

            var clientSecret;
            var customer_id;
            var stripe_amount, client_secret, stripe_currency, payment_intent_id, payment_method, payment_status, error_code,
                error_message, decline_code, charge;
            //var response = fetch('/secret').then(function (response) {
            //    return response.json();
            //}).then(function (responseJson) {
            //clientSecret = responseJson.client_secret;

            //console.log("customer id : ", responseJson.customer_id);

            var stripe = Stripe("@BusinessLogic.clsWebSession.StripePublishKey");
            var elements = stripe.elements();


            var card = elements.create("card", {
                hidePostalCode: true,
                style: style
            });
            card.mount("#card-element");


            card.on('change', function (event) {
                var displayError = document.getElementById('card-errors');
                if (event.error) {
                    displayError.textContent = event.error.message;
                } else {
                    displayError.textContent = '';
                }
            });

            var form = document.getElementById('payment-form');

            form.addEventListener('submit', function (ev) {
                ev.preventDefault();

                // hide actual form div
                // show loading div

                $("#submit").attr("disabled", true);
                $("#spinner").show();
                
                var customer_name = $("#name").val();
                var email = $("#email").val();
                var amount = '@BusinessLogic.SBSession.GetSessionValue("SessionAmount")';
                var currency = '@BusinessLogic.SBSession.GetSessionValue("SessionCurrency")';
                //alert(amount);

                var response = fetch('/secret?c=' + customer_name + '&e=' + email + '&amt=' + amount + '&cur=' + currency).then(function (response) {
                    return response.json();
                }).then(function (responseJson) {

                    clientSecret = responseJson.client_secret;
                    customer_id = responseJson.customer_id;

                    console.log(customer_id);

                    stripe.confirmCardPayment(clientSecret, {
                        payment_method: {
                            card: card,
                            billing_details: {
                                name: customer_name
                            }
                        }
                    }).then(function (result) {

                        // hide loadin div
                        // show success div if success
                        // show error div and show actual form div

                        $("#spinner").hide();


                        if (result.error) {
                            // Show error to your customer (e.g., insufficient funds)
                            //console.log("error message " + result.error.message);
                            //console.log("error object " + result)

                            stripe_amount = result.error.payment_intent.amount;
                            client_secret = result.error.payment_intent.client_secret;
                            stripe_currency = result.error.payment_intent.currency;
                            payment_intent_id = result.error.payment_intent.id;
                            payment_method = result.error.payment_intent.payment_method;
                            payment_status = 'failed';

                            error_code = result.error.code;
                            error_message = result.error.message;
                            decline_code = result.error.decline_code;
                            charge = result.error.charge;
                        }
                        else {
                            // The payment has been processed!
                            if (result.paymentIntent.status === 'succeeded') {

                                //console.log(result.paymentIntent.payment_method);
                                //console.log(result.paymentIntent.client_secret);

                                stripe_amount = result.paymentIntent.amount;
                                client_secret = result.paymentIntent.client_secret;
                                stripe_currency = result.paymentIntent.currency;
                                payment_intent_id = result.paymentIntent.id;
                                payment_method = result.paymentIntent.payment_method;
                                payment_status = result.paymentIntent.status;

                                // Show a success message to your customer
                                // There's a risk of the customer closing the window before callback
                                // execution. Set up a webhook or plugin to listen for the
                                // payment_intent.succeeded event that handles any business critical
                                // post-payment actions.
                            }
                        }

                        SavePayment();

                    });

                });
            });

            // Set up Stripe.js and Elements to use in checkout form
            var style = {
                base: {
                    color: "#32325d",
                }
            };


            function SavePayment() {

                //alert(client_secret);

                $.ajax({
                    type: "POST",
                    url: '/Web/SavePaymentSubscription',
                    data: {
                        customer_id: customer_id,
                        stripe_amount: stripe_amount,
                        client_secret: client_secret,
                        stripe_currency: stripe_currency,
                        payment_intent_id: payment_intent_id,
                        payment_method: payment_method,
                        payment_status: payment_status,
                        error_code: error_code,
                        error_message: error_message,
                        decline_code: decline_code,
                        charge: charge
                    },
                    success: function (data) {

                        //console.log(data);

                        if (data.ErrorCode == '000') {
                            ToastSuccess('SUCCESS', 'Subscription completed Successfully..!');
                            setTimeout(function () { window.location.href = '/payment-success'; }, 3000);
                        }
                        else if (data.ErrorCode == '001') {
                            ToastWarning('FAILED', error_message);
                            setTimeout(function () { window.location.href = '/payment-failed'; }, 3000);
                        }
                        else {
                            ToastError('FAILED', 'Error Occured..!');
                        }

                    },
                    failure: function (data) {
                        console.log("failed result :", data);
                    },
                    complete: function () {

                    }
                });

            }

        </script>

